
LL_WIRELESS_SERVO_MOTOR_CONTROL_WITH_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ebc  08002ebc  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002ec4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004054  2**0
                  CONTENTS
 10 .bss          000001d8  20000054  20000054  00004054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00004054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004fb1  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001098  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  0000a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004db  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c571  00000000  00000000  0000ac43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000051f6  00000000  00000000  000271b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e022  00000000  00000000  0002c3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ca3cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002014  00000000  00000000  000ca410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  000cc424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e10 	.word	0x08002e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08002e10 	.word	0x08002e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db0b      	blt.n	80005ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 021f 	and.w	r2, r3, #31
 80005dc:	4907      	ldr	r1, [pc, #28]	@ (80005fc <__NVIC_EnableIRQ+0x38>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	@ (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	@ (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	@ 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <LL_RCC_HSE_Enable+0x1c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <LL_RCC_HSE_Enable+0x1c>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <LL_RCC_HSE_IsReady+0x24>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <LL_RCC_SetSysClkSource+0x24>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f023 0203 	bic.w	r2, r3, #3
 8000714:	4904      	ldr	r1, [pc, #16]	@ (8000728 <LL_RCC_SetSysClkSource+0x24>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	608b      	str	r3, [r1, #8]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40023800 	.word	0x40023800

0800072c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <LL_RCC_GetSysClkSource+0x18>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f003 030c 	and.w	r3, r3, #12
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <LL_RCC_SetAHBPrescaler+0x24>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000758:	4904      	ldr	r1, [pc, #16]	@ (800076c <LL_RCC_SetAHBPrescaler+0x24>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	608b      	str	r3, [r1, #8]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <LL_RCC_SetAPB1Prescaler+0x24>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000780:	4904      	ldr	r1, [pc, #16]	@ (8000794 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	608b      	str	r3, [r1, #8]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	40023800 	.word	0x40023800

08000798 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80007a8:	4904      	ldr	r1, [pc, #16]	@ (80007bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40023800 	.word	0x40023800

080007c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <LL_RCC_PLL_Enable+0x1c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <LL_RCC_PLL_Enable+0x1c>)
 80007ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <LL_RCC_PLL_IsReady+0x24>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800081c:	4013      	ands	r3, r2
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	4311      	orrs	r1, r2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0192      	lsls	r2, r2, #6
 8000828:	430a      	orrs	r2, r1
 800082a:	4908      	ldr	r1, [pc, #32]	@ (800084c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800082c:	4313      	orrs	r3, r2
 800082e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000838:	4904      	ldr	r1, [pc, #16]	@ (800084c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	4313      	orrs	r3, r2
 800083e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	40023800 	.word	0x40023800
 8000850:	ffbf8000 	.word	0xffbf8000

08000854 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800085e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000860:	4907      	ldr	r1, [pc, #28]	@ (8000880 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800086a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4013      	ands	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40023800 	.word	0x40023800

08000884 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800088e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000890:	4907      	ldr	r1, [pc, #28]	@ (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008c0:	4907      	ldr	r1, [pc, #28]	@ (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4013      	ands	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40023800 	.word	0x40023800

080008e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <LL_FLASH_SetLatency+0x24>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 0207 	bic.w	r2, r3, #7
 80008f4:	4904      	ldr	r1, [pc, #16]	@ (8000908 <LL_FLASH_SetLatency+0x24>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	600b      	str	r3, [r1, #0]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40023c00 	.word	0x40023c00

0800090c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LL_FLASH_GetLatency+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0307 	and.w	r3, r3, #7
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023c00 	.word	0x40023c00

08000928 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000938:	4904      	ldr	r1, [pc, #16]	@ (800094c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40007000 	.word	0x40007000

08000950 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40007000 	.word	0x40007000

08000978 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f043 0201 	orr.w	r2, r3, #1
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a1a      	ldr	r2, [r3, #32]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	621a      	str	r2, [r3, #32]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d01c      	beq.n	8000a26 <LL_TIM_OC_DisableFast+0x4a>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d017      	beq.n	8000a22 <LL_TIM_OC_DisableFast+0x46>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b10      	cmp	r3, #16
 80009f6:	d012      	beq.n	8000a1e <LL_TIM_OC_DisableFast+0x42>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b40      	cmp	r3, #64	@ 0x40
 80009fc:	d00d      	beq.n	8000a1a <LL_TIM_OC_DisableFast+0x3e>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a04:	d007      	beq.n	8000a16 <LL_TIM_OC_DisableFast+0x3a>
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a0c:	d101      	bne.n	8000a12 <LL_TIM_OC_DisableFast+0x36>
 8000a0e:	2305      	movs	r3, #5
 8000a10:	e00a      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a12:	2306      	movs	r3, #6
 8000a14:	e008      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_TIM_OC_DisableFast+0x4c>
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3318      	adds	r3, #24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <LL_TIM_OC_DisableFast+0x84>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	440b      	add	r3, r1
 8000a38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4908      	ldr	r1, [pc, #32]	@ (8000a64 <LL_TIM_OC_DisableFast+0x88>)
 8000a42:	5ccb      	ldrb	r3, [r1, r3]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2304      	movs	r3, #4
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	601a      	str	r2, [r3, #0]

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	08002e58 	.word	0x08002e58
 8000a64:	08002e60 	.word	0x08002e60

08000a68 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d01c      	beq.n	8000ab2 <LL_TIM_OC_EnablePreload+0x4a>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d017      	beq.n	8000aae <LL_TIM_OC_EnablePreload+0x46>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d012      	beq.n	8000aaa <LL_TIM_OC_EnablePreload+0x42>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b40      	cmp	r3, #64	@ 0x40
 8000a88:	d00d      	beq.n	8000aa6 <LL_TIM_OC_EnablePreload+0x3e>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a90:	d007      	beq.n	8000aa2 <LL_TIM_OC_EnablePreload+0x3a>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a98:	d101      	bne.n	8000a9e <LL_TIM_OC_EnablePreload+0x36>
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	e00a      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	e008      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	e006      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e004      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e002      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	4619      	mov	r1, r3
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LL_TIM_OC_EnablePreload+0x80>)
 8000ac0:	5cd3      	ldrb	r3, [r2, r3]
 8000ac2:	440b      	add	r3, r1
 8000ac4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4907      	ldr	r1, [pc, #28]	@ (8000aec <LL_TIM_OC_EnablePreload+0x84>)
 8000ace:	5ccb      	ldrb	r3, [r1, r3]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	408b      	lsls	r3, r1
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	08002e58 	.word	0x08002e58
 8000aec:	08002e60 	.word	0x08002e60

08000af0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	609a      	str	r2, [r3, #8]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	615a      	str	r2, [r3, #20]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	2b20      	cmp	r3, #32
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b40      	cmp	r3, #64	@ 0x40
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	2b80      	cmp	r3, #128	@ 0x80
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	e853 3f00 	ldrex	r3, [r3]
 8000c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	330c      	adds	r3, #12
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	61ba      	str	r2, [r7, #24]
 8000c56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c58:	6979      	ldr	r1, [r7, #20]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	e841 2300 	strex	r3, r2, [r1]
 8000c60:	613b      	str	r3, [r7, #16]
   return(result);
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e7      	bne.n	8000c38 <LL_USART_EnableIT_RXNE+0x8>
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3724      	adds	r7, #36	@ 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b2db      	uxtb	r3, r3
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <map_value>:
  * @param  out_min: Minimum value of the output range.
  * @param  out_max: Maximum value of the output range.
  * @retval Mapped output value.
  */
uint16_t map_value(uint8_t in_value, uint8_t in_min, uint8_t in_max, uint16_t out_min, uint16_t out_max)
{
 8000cae:	b490      	push	{r4, r7}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	4611      	mov	r1, r2
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4623      	mov	r3, r4
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71bb      	strb	r3, [r7, #6]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	717b      	strb	r3, [r7, #5]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	807b      	strh	r3, [r7, #2]
    return out_min + ((in_value - in_min) * (out_max - out_min)) / (in_max - in_min);
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	8a39      	ldrh	r1, [r7, #16]
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	1a8a      	subs	r2, r1, r2
 8000cd8:	fb03 f202 	mul.w	r2, r3, r2
 8000cdc:	7979      	ldrb	r1, [r7, #5]
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	4413      	add	r3, r2
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc90      	pop	{r4, r7}
 8000cf6:	4770      	bx	lr

08000cf8 <USART_Send_String>:
  * @param  USARTx: USART instance to use.
  * @param  str: Pointer to the string to be sent.
  * @retval None
  */
void USART_Send_String(USART_TypeDef *USARTx, char *str)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
    while (*str)
 8000d02:	e00e      	b.n	8000d22 <USART_Send_String+0x2a>
    {
        // Wait for the transmit data register to be empty
        while(!LL_USART_IsActiveFlag_TXE(USARTx));
 8000d04:	bf00      	nop
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff7f 	bl	8000c0a <LL_USART_IsActiveFlag_TXE>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f9      	beq.n	8000d06 <USART_Send_String+0xe>

        // Send the data
        LL_USART_TransmitData8(USARTx, *str++);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	603a      	str	r2, [r7, #0]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ffb7 	bl	8000c90 <LL_USART_TransmitData8>
    while (*str)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ec      	bne.n	8000d04 <USART_Send_String+0xc>
        // Wait for the transmission to complete if needed
        // while(!LL_USART_IsActiveFlag_TC(USARTx));
    }

    // Wait for the last byte to be transmitted
    while(!LL_USART_IsActiveFlag_TC(USARTx));
 8000d2a:	bf00      	nop
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff59 	bl	8000be4 <LL_USART_IsActiveFlag_TC>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <USART_Send_String+0x34>
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <USART2_IRQHandler>:
/**
  * @brief  USART2 IRQ handler.
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af02      	add	r7, sp, #8
    // Check if the RXNE flag is set
    if (LL_USART_IsActiveFlag_RXNE(USART2))
 8000d4a:	484b      	ldr	r0, [pc, #300]	@ (8000e78 <USART2_IRQHandler+0x134>)
 8000d4c:	f7ff ff37 	bl	8000bbe <LL_USART_IsActiveFlag_RXNE>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 808d 	beq.w	8000e72 <USART2_IRQHandler+0x12e>
    {
        data = LL_USART_ReceiveData8(USART2);
 8000d58:	4847      	ldr	r0, [pc, #284]	@ (8000e78 <USART2_IRQHandler+0x134>)
 8000d5a:	f7ff ff8c 	bl	8000c76 <LL_USART_ReceiveData8>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b46      	ldr	r3, [pc, #280]	@ (8000e7c <USART2_IRQHandler+0x138>)
 8000d64:	701a      	strb	r2, [r3, #0]

        if (data == '\r')
 8000d66:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <USART2_IRQHandler+0x138>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b0d      	cmp	r3, #13
 8000d6c:	f000 8081 	beq.w	8000e72 <USART2_IRQHandler+0x12e>
        {
            // Handle carriage return if needed
        }
        else if(data == '\n') //the app i used sends '\r' then sends 'n' after the data by user is sent
 8000d70:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <USART2_IRQHandler+0x138>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b0a      	cmp	r3, #10
 8000d76:	d16f      	bne.n	8000e58 <USART2_IRQHandler+0x114>
        {
            rx_buffer[rx_index] = '\0';
 8000d78:	4b41      	ldr	r3, [pc, #260]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a41      	ldr	r2, [pc, #260]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	54d1      	strb	r1, [r2, r3]
            switch (rx_index)
 8000d82:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d01f      	beq.n	8000dca <USART2_IRQHandler+0x86>
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	dc3f      	bgt.n	8000e0e <USART2_IRQHandler+0xca>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d002      	beq.n	8000d98 <USART2_IRQHandler+0x54>
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d007      	beq.n	8000da6 <USART2_IRQHandler+0x62>
 8000d96:	e03a      	b.n	8000e0e <USART2_IRQHandler+0xca>
            {
                case 1:
                    angle = (rx_buffer[0] - '0');
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3b30      	subs	r3, #48	@ 0x30
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b39      	ldr	r3, [pc, #228]	@ (8000e88 <USART2_IRQHandler+0x144>)
 8000da2:	701a      	strb	r2, [r3, #0]
                    break;
 8000da4:	e033      	b.n	8000e0e <USART2_IRQHandler+0xca>
                case 2:
                    angle = (rx_buffer[0] - '0') * 10 + (rx_buffer[1] - '0');
 8000da6:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3b30      	subs	r3, #48	@ 0x30
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	3b30      	subs	r3, #48	@ 0x30
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b30      	ldr	r3, [pc, #192]	@ (8000e88 <USART2_IRQHandler+0x144>)
 8000dc6:	701a      	strb	r2, [r3, #0]
                    break;
 8000dc8:	e021      	b.n	8000e0e <USART2_IRQHandler+0xca>
                case 3:
                    angle = (rx_buffer[0] - '0') * 100 + (rx_buffer[1] - '0') * 10 + (rx_buffer[2] - '0');
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3b30      	subs	r3, #48	@ 0x30
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	0091      	lsls	r1, r2, #2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	460b      	mov	r3, r1
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	3b30      	subs	r3, #48	@ 0x30
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	0089      	lsls	r1, r1, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000dfe:	789b      	ldrb	r3, [r3, #2]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3b30      	subs	r3, #48	@ 0x30
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <USART2_IRQHandler+0x144>)
 8000e0a:	701a      	strb	r2, [r3, #0]
                    break;
 8000e0c:	bf00      	nop
            }
            pulse = map_value(angle, 0, 180, 499, 2499);
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <USART2_IRQHandler+0x144>)
 8000e10:	7818      	ldrb	r0, [r3, #0]
 8000e12:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000e1c:	22b4      	movs	r2, #180	@ 0xb4
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f7ff ff45 	bl	8000cae <map_value>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <USART2_IRQHandler+0x148>)
 8000e2a:	801a      	strh	r2, [r3, #0]
            LL_TIM_OC_SetCompareCH2(TIM2, pulse);
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <USART2_IRQHandler+0x148>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e36:	f7ff fe5b 	bl	8000af0 <LL_TIM_OC_SetCompareCH2>

            sprintf(tx_buffer, "The angle is %u", angle);
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <USART2_IRQHandler+0x144>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4913      	ldr	r1, [pc, #76]	@ (8000e90 <USART2_IRQHandler+0x14c>)
 8000e42:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <USART2_IRQHandler+0x150>)
 8000e44:	f001 fb44 	bl	80024d0 <siprintf>
            USART_Send_String(USART2, tx_buffer);
 8000e48:	4912      	ldr	r1, [pc, #72]	@ (8000e94 <USART2_IRQHandler+0x150>)
 8000e4a:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <USART2_IRQHandler+0x134>)
 8000e4c:	f7ff ff54 	bl	8000cf8 <USART_Send_String>
            rx_index = 0;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
            {
                rx_buffer[rx_index++] = data;
            }
        }
    }
}
 8000e56:	e00c      	b.n	8000e72 <USART2_IRQHandler+0x12e>
            if (rx_index < sizeof(rx_buffer) - 1) // Buffer overflow check
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b30      	cmp	r3, #48	@ 0x30
 8000e5e:	d808      	bhi.n	8000e72 <USART2_IRQHandler+0x12e>
                rx_buffer[rx_index++] = data;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	4906      	ldr	r1, [pc, #24]	@ (8000e80 <USART2_IRQHandler+0x13c>)
 8000e68:	600a      	str	r2, [r1, #0]
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <USART2_IRQHandler+0x138>)
 8000e6c:	7811      	ldrb	r1, [r2, #0]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <USART2_IRQHandler+0x140>)
 8000e70:	54d1      	strb	r1, [r2, r3]
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	200000dc 	.word	0x200000dc
 8000e80:	200000d8 	.word	0x200000d8
 8000e84:	200000a4 	.word	0x200000a4
 8000e88:	200000dd 	.word	0x200000dd
 8000e8c:	200000de 	.word	0x200000de
 8000e90:	08002e28 	.word	0x08002e28
 8000e94:	20000070 	.word	0x20000070

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ea0:	f7ff fd08 	bl	80008b4 <LL_APB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ea4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000ea8:	f7ff fcec 	bl	8000884 <LL_APB1_GRP1_EnableClock>

    /* System interrupt init*/
    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff fb57 	bl	8000560 <__NVIC_SetPriorityGrouping>

    /* SysTick_IRQn interrupt configuration */
    NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8000eb2:	f7ff fb79 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2200      	movs	r2, #0
 8000eba:	210f      	movs	r1, #15
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fbc9 	bl	8000654 <NVIC_EncodePriority>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	f7ff fb99 	bl	8000600 <__NVIC_SetPriority>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000ece:	f000 f81d 	bl	8000f0c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ed2:	f000 f939 	bl	8001148 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000ed6:	f000 f863 	bl	8000fa0 <MX_TIM2_Init>
    MX_USART2_UART_Init();
 8000eda:	f000 f8d1 	bl	8001080 <MX_USART2_UART_Init>

    /* USER CODE BEGIN 2 */
    USART_Send_String(USART2, "Please enter the angle value\n");
 8000ede:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <main+0x6c>)
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <main+0x70>)
 8000ee2:	f7ff ff09 	bl	8000cf8 <USART_Send_String>

    // Start TIM2 counter and enable PWM output
    LL_TIM_EnableCounter(TIM2);
 8000ee6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000eea:	f7ff fd45 	bl	8000978 <LL_TIM_EnableCounter>
    LL_TIM_EnableAllOutputs(TIM2);
 8000eee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ef2:	f7ff fe2e 	bl	8000b52 <LL_TIM_EnableAllOutputs>

    // Enable TIM2 channel 2 for PWM output
    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000efc:	f7ff fd5c 	bl	80009b8 <LL_TIM_CC_EnableChannel>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <main+0x68>
 8000f04:	08002e38 	.word	0x08002e38
 8000f08:	40004400 	.word	0x40004400

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000f10:	2005      	movs	r0, #5
 8000f12:	f7ff fce7 	bl	80008e4 <LL_FLASH_SetLatency>
    while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8000f16:	bf00      	nop
 8000f18:	f7ff fcf8 	bl	800090c <LL_FLASH_GetLatency>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d1fa      	bne.n	8000f18 <SystemClock_Config+0xc>
    {
    }
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000f22:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f26:	f7ff fcff 	bl	8000928 <LL_PWR_SetRegulVoltageScaling>
    LL_RCC_HSE_Enable();
 8000f2a:	f7ff fbc7 	bl	80006bc <LL_RCC_HSE_Enable>

    /* Wait till HSE is ready */
    while(LL_RCC_HSE_IsReady() != 1)
 8000f2e:	bf00      	nop
 8000f30:	f7ff fbd4 	bl	80006dc <LL_RCC_HSE_IsReady>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d1fa      	bne.n	8000f30 <SystemClock_Config+0x24>
    {
    }
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	22a8      	movs	r2, #168	@ 0xa8
 8000f3e:	2104      	movs	r1, #4
 8000f40:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000f44:	f7ff fc60 	bl	8000808 <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 8000f48:	f7ff fc3a 	bl	80007c0 <LL_RCC_PLL_Enable>

    /* Wait till PLL is ready */
    while(LL_RCC_PLL_IsReady() != 1)
 8000f4c:	bf00      	nop
 8000f4e:	f7ff fc47 	bl	80007e0 <LL_RCC_PLL_IsReady>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d1fa      	bne.n	8000f4e <SystemClock_Config+0x42>
    {
    }
    while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000f58:	bf00      	nop
 8000f5a:	f7ff fcf9 	bl	8000950 <LL_PWR_IsActiveFlag_VOS>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0fa      	beq.n	8000f5a <SystemClock_Config+0x4e>
    {
    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fbef 	bl	8000748 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f6a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000f6e:	f7ff fbff 	bl	8000770 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f76:	f7ff fc0f 	bl	8000798 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff fbc2 	bl	8000704 <LL_RCC_SetSysClkSource>

    /* Wait till System clock is ready */
    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f80:	bf00      	nop
 8000f82:	f7ff fbd3 	bl	800072c <LL_RCC_GetSysClkSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d1fa      	bne.n	8000f82 <SystemClock_Config+0x76>
    {
    }
    LL_Init1msTick(168000000);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <SystemClock_Config+0x90>)
 8000f8e:	f001 fa81 	bl	8002494 <LL_Init1msTick>
    LL_SetSystemCoreClock(168000000);
 8000f92:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <SystemClock_Config+0x90>)
 8000f94:	f001 fa8c 	bl	80024b0 <LL_SetSystemCoreClock>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0a037a00 	.word	0x0a037a00

08000fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fa6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 faa6 	bl	8002510 <memset>

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	615a      	str	r2, [r3, #20]

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fc55 	bl	8000884 <LL_APB1_GRP1_EnableClock>

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    TIM_InitStruct.Prescaler = 83;
 8000fda:	2353      	movs	r3, #83	@ 0x53
 8000fdc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	643b      	str	r3, [r7, #64]	@ 0x40
    TIM_InitStruct.Autoreload = 19999;
 8000fe2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8000fe6:	647b      	str	r3, [r7, #68]	@ 0x44
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	64bb      	str	r3, [r7, #72]	@ 0x48
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000fec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ff6:	f000 fccb 	bl	8001990 <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM2);
 8000ffa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ffe:	f7ff fccb 	bl	8000998 <LL_TIM_DisableARRPreload>
    LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001002:	2110      	movs	r1, #16
 8001004:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001008:	f7ff fd2e 	bl	8000a68 <LL_TIM_OC_EnablePreload>
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800100c:	2360      	movs	r3, #96	@ 0x60
 800100e:	61fb      	str	r3, [r7, #28]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    TIM_OC_InitStruct.CompareValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	461a      	mov	r2, r3
 8001026:	2110      	movs	r1, #16
 8001028:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800102c:	f000 fd4a 	bl	8001ac4 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001030:	2110      	movs	r1, #16
 8001032:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001036:	f7ff fcd1 	bl	80009dc <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800103a:	2100      	movs	r1, #0
 800103c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001040:	f7ff fd64 	bl	8000b0c <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM2);
 8001044:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001048:	f7ff fd73 	bl	8000b32 <LL_TIM_DisableMasterSlaveMode>
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff fc01 	bl	8000854 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1   ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001052:	2302      	movs	r3, #2
 8001054:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <MX_TIM2_Init+0xdc>)
 8001070:	f000 fa60 	bl	8001534 <LL_GPIO_Init>
}
 8001074:	bf00      	nop
 8001076:	3750      	adds	r7, #80	@ 0x50
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020000 	.word	0x40020000

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	@ 0x38
 8001084:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */

    /* USER CODE END USART2_Init 0 */

    LL_USART_InitTypeDef USART_InitStruct = {0};
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80010aa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80010ae:	f7ff fbe9 	bl	8000884 <LL_APB1_GRP1_EnableClock>

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff fbce 	bl	8000854 <LL_AHB1_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2   ------> USART2_TX
    PA3   ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80010b8:	230c      	movs	r3, #12
 80010ba:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010bc:	2302      	movs	r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80010cc:	2307      	movs	r3, #7
 80010ce:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	481a      	ldr	r0, [pc, #104]	@ (8001140 <MX_USART2_UART_Init+0xc0>)
 80010d6:	f000 fa2d 	bl	8001534 <LL_GPIO_Init>

    /* USART2 interrupt Init */
    NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80010da:	f7ff fa65 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 80010de:	4603      	mov	r3, r0
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fab5 	bl	8000654 <NVIC_EncodePriority>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	2026      	movs	r0, #38	@ 0x26
 80010f0:	f7ff fa86 	bl	8000600 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80010f4:	2026      	movs	r0, #38	@ 0x26
 80010f6:	f7ff fa65 	bl	80005c4 <__NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    USART_InitStruct.BaudRate = 9600;
 80010fa:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80010fe:	61fb      	str	r3, [r7, #28]
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800110c:	230c      	movs	r3, #12
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
    LL_USART_Init(USART2, &USART_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <MX_USART2_UART_Init+0xc4>)
 8001120:	f001 f91e 	bl	8002360 <LL_USART_Init>
    LL_USART_ConfigAsyncMode(USART2);
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <MX_USART2_UART_Init+0xc4>)
 8001126:	f7ff fd34 	bl	8000b92 <LL_USART_ConfigAsyncMode>
    LL_USART_Enable(USART2);
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_USART2_UART_Init+0xc4>)
 800112c:	f7ff fd21 	bl	8000b72 <LL_USART_Enable>
    /* USER CODE BEGIN USART2_Init 2 */
    LL_USART_EnableIT_RXNE(USART2);
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_USART2_UART_Init+0xc4>)
 8001132:	f7ff fd7d 	bl	8000c30 <LL_USART_EnableIT_RXNE>
    /* USER CODE END USART2_Init 2 */
}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	@ 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020000 	.word	0x40020000
 8001144:	40004400 	.word	0x40004400

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800114c:	2080      	movs	r0, #128	@ 0x80
 800114e:	f7ff fb81 	bl	8000854 <LL_AHB1_GRP1_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fb7e 	bl	8000854 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f001 f998 	bl	8002520 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	200000e0 	.word	0x200000e0
 8001224:	20000230 	.word	0x20000230

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f001 f957 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fe0b 	bl	8000e98 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001290:	08002ec4 	.word	0x08002ec4
  ldr r2, =_sbss
 8001294:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001298:	2000022c 	.word	0x2000022c

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>

0800129e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800129e:	b480      	push	{r7}
 80012a0:	b08b      	sub	sp, #44	@ 0x2c
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	613b      	str	r3, [r7, #16]
  return result;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80012c4:	2320      	movs	r3, #32
 80012c6:	e003      	b.n	80012d0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2103      	movs	r1, #3
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	61fb      	str	r3, [r7, #28]
  return result;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80012f2:	2320      	movs	r3, #32
 80012f4:	e003      	b.n	80012fe <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	372c      	adds	r7, #44	@ 0x2c
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	43db      	mvns	r3, r3
 800132c:	401a      	ands	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	431a      	orrs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	613b      	str	r3, [r7, #16]
  return result;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800136e:	2320      	movs	r3, #32
 8001370:	e003      	b.n	800137a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2103      	movs	r1, #3
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	401a      	ands	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	61fb      	str	r3, [r7, #28]
  return result;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800139c:	2320      	movs	r3, #32
 800139e:	e003      	b.n	80013a8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80013b6:	bf00      	nop
 80013b8:	372c      	adds	r7, #44	@ 0x2c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b08b      	sub	sp, #44	@ 0x2c
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	613b      	str	r3, [r7, #16]
  return result;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80013e8:	2320      	movs	r3, #32
 80013ea:	e003      	b.n	80013f4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2103      	movs	r1, #3
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	61fb      	str	r3, [r7, #28]
  return result;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001416:	2320      	movs	r3, #32
 8001418:	e003      	b.n	8001422 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	431a      	orrs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	372c      	adds	r7, #44	@ 0x2c
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	@ 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	613b      	str	r3, [r7, #16]
  return result;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001462:	2320      	movs	r3, #32
 8001464:	e003      	b.n	800146e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	210f      	movs	r1, #15
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	61fb      	str	r3, [r7, #28]
  return result;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001490:	2320      	movs	r3, #32
 8001492:	e003      	b.n	800149c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80014aa:	bf00      	nop
 80014ac:	372c      	adds	r7, #44	@ 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b08b      	sub	sp, #44	@ 0x2c
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	613b      	str	r3, [r7, #16]
  return result;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80014de:	2320      	movs	r3, #32
 80014e0:	e003      	b.n	80014ea <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	210f      	movs	r1, #15
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	61fb      	str	r3, [r7, #28]
  return result;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800150e:	2320      	movs	r3, #32
 8001510:	e003      	b.n	800151a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	431a      	orrs	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001528:	bf00      	nop
 800152a:	372c      	adds	r7, #44	@ 0x2c
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	617b      	str	r3, [r7, #20]
  return result;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <LL_GPIO_Init+0x2e>
    return 32U;
 800155e:	2320      	movs	r3, #32
 8001560:	e003      	b.n	800156a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800156c:	e057      	b.n	800161e <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2101      	movs	r1, #1
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	4013      	ands	r3, r2
 800157c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d049      	beq.n	8001618 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <LL_GPIO_Init+0x60>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d10d      	bne.n	80015b0 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	461a      	mov	r2, r3
 800159a:	6a39      	ldr	r1, [r7, #32]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fed3 	bl	8001348 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	461a      	mov	r2, r3
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff feb4 	bl	8001318 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	461a      	mov	r2, r3
 80015b6:	6a39      	ldr	r1, [r7, #32]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff02 	bl	80013c2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d121      	bne.n	800160a <LL_GPIO_Init+0xd6>
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	60bb      	str	r3, [r7, #8]
  return result;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <LL_GPIO_Init+0xac>
    return 32U;
 80015dc:	2320      	movs	r3, #32
 80015de:	e003      	b.n	80015e8 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d807      	bhi.n	80015fc <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	461a      	mov	r2, r3
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff21 	bl	800143c <LL_GPIO_SetAFPin_0_7>
 80015fa:	e006      	b.n	800160a <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	461a      	mov	r2, r3
 8001602:	6a39      	ldr	r1, [r7, #32]
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff56 	bl	80014b6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	461a      	mov	r2, r3
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe43 	bl	800129e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	3301      	adds	r3, #1
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1a0      	bne.n	800156e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <LL_RCC_GetSysClkSource>:
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <LL_RCC_GetSysClkSource+0x18>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <LL_RCC_GetAHBPrescaler>:
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <LL_RCC_GetAHBPrescaler+0x18>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <LL_RCC_GetAPB1Prescaler>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <LL_RCC_GetAPB2Prescaler>:
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <LL_RCC_PLL_GetMainSource+0x18>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <LL_RCC_PLL_GetN+0x18>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40023800 	.word	0x40023800

080016e0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <LL_RCC_PLL_GetP+0x18>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <LL_RCC_PLL_GetDivider+0x18>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001720:	f000 f820 	bl	8001764 <RCC_GetSystemClockFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f840 	bl	80017b4 <RCC_GetHCLKClockFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f84e 	bl	80017e0 <RCC_GetPCLK1ClockFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f85a 	bl	8001808 <RCC_GetPCLK2ClockFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800176e:	f7ff ff63 	bl	8001638 <LL_RCC_GetSysClkSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00c      	beq.n	8001792 <RCC_GetSystemClockFreq+0x2e>
 8001778:	2b08      	cmp	r3, #8
 800177a:	d80f      	bhi.n	800179c <RCC_GetSystemClockFreq+0x38>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <RCC_GetSystemClockFreq+0x22>
 8001780:	2b04      	cmp	r3, #4
 8001782:	d003      	beq.n	800178c <RCC_GetSystemClockFreq+0x28>
 8001784:	e00a      	b.n	800179c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <RCC_GetSystemClockFreq+0x48>)
 8001788:	607b      	str	r3, [r7, #4]
      break;
 800178a:	e00a      	b.n	80017a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <RCC_GetSystemClockFreq+0x4c>)
 800178e:	607b      	str	r3, [r7, #4]
      break;
 8001790:	e007      	b.n	80017a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001792:	2008      	movs	r0, #8
 8001794:	f000 f84c 	bl	8001830 <RCC_PLL_GetFreqDomain_SYS>
 8001798:	6078      	str	r0, [r7, #4]
      break;
 800179a:	e002      	b.n	80017a2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <RCC_GetSystemClockFreq+0x48>)
 800179e:	607b      	str	r3, [r7, #4]
      break;
 80017a0:	bf00      	nop
  }

  return frequency;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	007a1200 	.word	0x007a1200

080017b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80017bc:	f7ff ff4a 	bl	8001654 <LL_RCC_GetAHBPrescaler>
 80017c0:	4603      	mov	r3, r0
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <RCC_GetHCLKClockFreq+0x28>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	40d3      	lsrs	r3, r2
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08002e68 	.word	0x08002e68

080017e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80017e8:	f7ff ff42 	bl	8001670 <LL_RCC_GetAPB1Prescaler>
 80017ec:	4603      	mov	r3, r0
 80017ee:	0a9b      	lsrs	r3, r3, #10
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <RCC_GetPCLK1ClockFreq+0x24>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	40d3      	lsrs	r3, r2
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	08002e78 	.word	0x08002e78

08001808 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001810:	f7ff ff3c 	bl	800168c <LL_RCC_GetAPB2Prescaler>
 8001814:	4603      	mov	r3, r0
 8001816:	0b5b      	lsrs	r3, r3, #13
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <RCC_GetPCLK2ClockFreq+0x24>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	40d3      	lsrs	r3, r2
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	08002e78 	.word	0x08002e78

08001830 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001844:	f7ff ff30 	bl	80016a8 <LL_RCC_PLL_GetMainSource>
 8001848:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001856:	d003      	beq.n	8001860 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001858:	e005      	b.n	8001866 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800185c:	617b      	str	r3, [r7, #20]
      break;
 800185e:	e005      	b.n	800186c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001862:	617b      	str	r3, [r7, #20]
      break;
 8001864:	e002      	b.n	800186c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001868:	617b      	str	r3, [r7, #20]
      break;
 800186a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d113      	bne.n	800189a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001872:	f7ff ff43 	bl	80016fc <LL_RCC_PLL_GetDivider>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fbb3 f4f2 	udiv	r4, r3, r2
 800187e:	f7ff ff21 	bl	80016c4 <LL_RCC_PLL_GetN>
 8001882:	4603      	mov	r3, r0
 8001884:	fb03 f404 	mul.w	r4, r3, r4
 8001888:	f7ff ff2a 	bl	80016e0 <LL_RCC_PLL_GetP>
 800188c:	4603      	mov	r3, r0
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	3301      	adds	r3, #1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fbb4 f3f3 	udiv	r3, r4, r3
 8001898:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800189a:	693b      	ldr	r3, [r7, #16]
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	007a1200 	.word	0x007a1200

080018ac <LL_TIM_SetPrescaler>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_TIM_SetAutoReload>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_TIM_SetRepetitionCounter>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_TIM_OC_SetCompareCH1>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_TIM_OC_SetCompareCH2>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_TIM_OC_SetCompareCH3>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_TIM_OC_SetCompareCH4>:
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	615a      	str	r2, [r3, #20]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <LL_TIM_Init+0x108>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <LL_TIM_Init+0x40>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ae:	d00f      	beq.n	80019d0 <LL_TIM_Init+0x40>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <LL_TIM_Init+0x10c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00b      	beq.n	80019d0 <LL_TIM_Init+0x40>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a39      	ldr	r2, [pc, #228]	@ (8001aa0 <LL_TIM_Init+0x110>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <LL_TIM_Init+0x40>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a38      	ldr	r2, [pc, #224]	@ (8001aa4 <LL_TIM_Init+0x114>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d003      	beq.n	80019d0 <LL_TIM_Init+0x40>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a37      	ldr	r2, [pc, #220]	@ (8001aa8 <LL_TIM_Init+0x118>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d106      	bne.n	80019de <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a98 <LL_TIM_Init+0x108>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d02b      	beq.n	8001a3e <LL_TIM_Init+0xae>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ec:	d027      	beq.n	8001a3e <LL_TIM_Init+0xae>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a9c <LL_TIM_Init+0x10c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d023      	beq.n	8001a3e <LL_TIM_Init+0xae>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a29      	ldr	r2, [pc, #164]	@ (8001aa0 <LL_TIM_Init+0x110>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <LL_TIM_Init+0xae>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <LL_TIM_Init+0x114>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01b      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a27      	ldr	r2, [pc, #156]	@ (8001aa8 <LL_TIM_Init+0x118>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d017      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <LL_TIM_Init+0x11c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a25      	ldr	r2, [pc, #148]	@ (8001ab0 <LL_TIM_Init+0x120>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00f      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <LL_TIM_Init+0x124>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00b      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a23      	ldr	r2, [pc, #140]	@ (8001ab8 <LL_TIM_Init+0x128>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <LL_TIM_Init+0x12c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d003      	beq.n	8001a3e <LL_TIM_Init+0xae>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <LL_TIM_Init+0x130>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d106      	bne.n	8001a4c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff35 	bl	80018c8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff21 	bl	80018ac <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <LL_TIM_Init+0x108>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <LL_TIM_Init+0xea>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <LL_TIM_Init+0x118>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d105      	bne.n	8001a86 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff2f 	bl	80018e4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff72 	bl	8001970 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	40010400 	.word	0x40010400
 8001aac:	40014000 	.word	0x40014000
 8001ab0:	40014400 	.word	0x40014400
 8001ab4:	40014800 	.word	0x40014800
 8001ab8:	40001800 	.word	0x40001800
 8001abc:	40001c00 	.word	0x40001c00
 8001ac0:	40002000 	.word	0x40002000

08001ac4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ada:	d027      	beq.n	8001b2c <LL_TIM_OC_Init+0x68>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae2:	d82a      	bhi.n	8001b3a <LL_TIM_OC_Init+0x76>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aea:	d018      	beq.n	8001b1e <LL_TIM_OC_Init+0x5a>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001af2:	d822      	bhi.n	8001b3a <LL_TIM_OC_Init+0x76>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d003      	beq.n	8001b02 <LL_TIM_OC_Init+0x3e>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d007      	beq.n	8001b10 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001b00:	e01b      	b.n	8001b3a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f81f 	bl	8001b48 <OC1Config>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8001b0e:	e015      	b.n	8001b3c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f884 	bl	8001c20 <OC2Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b1c:	e00e      	b.n	8001b3c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f8ed 	bl	8001d00 <OC3Config>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
      break;
 8001b2a:	e007      	b.n	8001b3c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f956 	bl	8001de0 <OC4Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]
      break;
 8001b38:	e000      	b.n	8001b3c <LL_TIM_OC_Init+0x78>
      break;
 8001b3a:	bf00      	nop
  }

  return result;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f023 0201 	bic.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f023 0202 	bic.w	r2, r3, #2
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0201 	bic.w	r2, r3, #1
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <OC1Config+0xd0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <OC1Config+0x6a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <OC1Config+0xd4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d11e      	bne.n	8001bf0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f023 0208 	bic.w	r2, r3, #8
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f023 0204 	bic.w	r2, r3, #4
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fe7c 	bl	8001900 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40010400 	.word	0x40010400

08001c20 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f023 0210 	bic.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f023 0220 	bic.w	r2, r3, #32
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f023 0210 	bic.w	r2, r3, #16
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <OC2Config+0xd8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d003      	beq.n	8001c90 <OC2Config+0x70>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <OC2Config+0xdc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d11f      	bne.n	8001cd0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	019b      	lsls	r3, r3, #6
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fe1a 	bl	800191c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010400 	.word	0x40010400

08001d00 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <OC3Config+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <OC3Config+0x6e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <OC3Config+0xdc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11f      	bne.n	8001dae <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fdb9 	bl	8001938 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40010400 	.word	0x40010400

08001de0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	031b      	lsls	r3, r3, #12
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <OC4Config+0xa8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <OC4Config+0x70>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	@ (8001e8c <OC4Config+0xac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d107      	bne.n	8001e60 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fd6e 	bl	8001954 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010400 	.word	0x40010400

08001e90 <LL_USART_IsEnabled>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_USART_SetStopBitsLength>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_USART_SetHWFlowCtrl>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	615a      	str	r2, [r3, #20]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_USART_SetBaudRate>:
{
 8001f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f08:	b0c0      	sub	sp, #256	@ 0x100
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f10:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001f14:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001f18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f24:	f040 810c 	bne.w	8002140 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	1891      	adds	r1, r2, r2
 8001f40:	6639      	str	r1, [r7, #96]	@ 0x60
 8001f42:	415b      	adcs	r3, r3
 8001f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	eb12 0801 	adds.w	r8, r2, r1
 8001f50:	4629      	mov	r1, r5
 8001f52:	eb43 0901 	adc.w	r9, r3, r1
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	eb18 0303 	adds.w	r3, r8, r3
 8001f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f78:	462b      	mov	r3, r5
 8001f7a:	eb49 0303 	adc.w	r3, r9, r3
 8001f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001f86:	2200      	movs	r2, #0
 8001f88:	469a      	mov	sl, r3
 8001f8a:	4693      	mov	fp, r2
 8001f8c:	eb1a 030a 	adds.w	r3, sl, sl
 8001f90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f92:	eb4b 030b 	adc.w	r3, fp, fp
 8001f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fa0:	f7fe f966 	bl	8000270 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4b64      	ldr	r3, [pc, #400]	@ (800213c <LL_USART_SetBaudRate+0x238>)
 8001faa:	fba3 2302 	umull	r2, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	b29c      	uxth	r4, r3
 8001fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001fc0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fc4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	1891      	adds	r1, r2, r2
 8001fce:	6539      	str	r1, [r7, #80]	@ 0x50
 8001fd0:	415b      	adcs	r3, r3
 8001fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fd8:	4641      	mov	r1, r8
 8001fda:	1851      	adds	r1, r2, r1
 8001fdc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fde:	4649      	mov	r1, r9
 8001fe0:	414b      	adcs	r3, r1
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	00cb      	lsls	r3, r1, #3
 8001ff4:	4651      	mov	r1, sl
 8001ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	00ca      	lsls	r2, r1, #3
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	4603      	mov	r3, r0
 8002004:	4642      	mov	r2, r8
 8002006:	189b      	adds	r3, r3, r2
 8002008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800200c:	464b      	mov	r3, r9
 800200e:	460a      	mov	r2, r1
 8002010:	eb42 0303 	adc.w	r3, r2, r3
 8002014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002018:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002022:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002026:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800202a:	460b      	mov	r3, r1
 800202c:	18db      	adds	r3, r3, r3
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002030:	4613      	mov	r3, r2
 8002032:	eb42 0303 	adc.w	r3, r2, r3
 8002036:	647b      	str	r3, [r7, #68]	@ 0x44
 8002038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800203c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002040:	f7fe f916 	bl	8000270 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4611      	mov	r1, r2
 800204a:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <LL_USART_SetBaudRate+0x238>)
 800204c:	fba3 2301 	umull	r2, r3, r3, r1
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	2264      	movs	r2, #100	@ 0x64
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	1acb      	subs	r3, r1, r3
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002060:	4b36      	ldr	r3, [pc, #216]	@ (800213c <LL_USART_SetBaudRate+0x238>)
 8002062:	fba3 2302 	umull	r2, r3, r3, r2
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	b29b      	uxth	r3, r3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002072:	b29b      	uxth	r3, r3
 8002074:	4423      	add	r3, r4
 8002076:	b29c      	uxth	r4, r3
 8002078:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800207c:	2200      	movs	r2, #0
 800207e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002082:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002086:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800208a:	4642      	mov	r2, r8
 800208c:	464b      	mov	r3, r9
 800208e:	1891      	adds	r1, r2, r2
 8002090:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002092:	415b      	adcs	r3, r3
 8002094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002096:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800209a:	4641      	mov	r1, r8
 800209c:	1851      	adds	r1, r2, r1
 800209e:	6339      	str	r1, [r7, #48]	@ 0x30
 80020a0:	4649      	mov	r1, r9
 80020a2:	414b      	adcs	r3, r1
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80020b2:	4659      	mov	r1, fp
 80020b4:	00cb      	lsls	r3, r1, #3
 80020b6:	4651      	mov	r1, sl
 80020b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020bc:	4651      	mov	r1, sl
 80020be:	00ca      	lsls	r2, r1, #3
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	4603      	mov	r3, r0
 80020c6:	4642      	mov	r2, r8
 80020c8:	189b      	adds	r3, r3, r2
 80020ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020ce:	464b      	mov	r3, r9
 80020d0:	460a      	mov	r2, r1
 80020d2:	eb42 0303 	adc.w	r3, r2, r3
 80020d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80020da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020e4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80020e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80020ec:	460b      	mov	r3, r1
 80020ee:	18db      	adds	r3, r3, r3
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020f2:	4613      	mov	r3, r2
 80020f4:	eb42 0303 	adc.w	r3, r2, r3
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002102:	f7fe f8b5 	bl	8000270 <__aeabi_uldivmod>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <LL_USART_SetBaudRate+0x238>)
 800210c:	fba3 1302 	umull	r1, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	2164      	movs	r1, #100	@ 0x64
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	3332      	adds	r3, #50	@ 0x32
 800211e:	4a07      	ldr	r2, [pc, #28]	@ (800213c <LL_USART_SetBaudRate+0x238>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b29b      	uxth	r3, r3
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	b29b      	uxth	r3, r3
 800212e:	4423      	add	r3, r4
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002138:	609a      	str	r2, [r3, #8]
}
 800213a:	e108      	b.n	800234e <LL_USART_SetBaudRate+0x44a>
 800213c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002144:	2200      	movs	r2, #0
 8002146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800214a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800214e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8002152:	4642      	mov	r2, r8
 8002154:	464b      	mov	r3, r9
 8002156:	1891      	adds	r1, r2, r2
 8002158:	6239      	str	r1, [r7, #32]
 800215a:	415b      	adcs	r3, r3
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
 800215e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002162:	4641      	mov	r1, r8
 8002164:	1854      	adds	r4, r2, r1
 8002166:	4649      	mov	r1, r9
 8002168:	eb43 0501 	adc.w	r5, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	00eb      	lsls	r3, r5, #3
 8002176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800217a:	00e2      	lsls	r2, r4, #3
 800217c:	4614      	mov	r4, r2
 800217e:	461d      	mov	r5, r3
 8002180:	4643      	mov	r3, r8
 8002182:	18e3      	adds	r3, r4, r3
 8002184:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002188:	464b      	mov	r3, r9
 800218a:	eb45 0303 	adc.w	r3, r5, r3
 800218e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002196:	2200      	movs	r2, #0
 8002198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800219c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80021ac:	4629      	mov	r1, r5
 80021ae:	008b      	lsls	r3, r1, #2
 80021b0:	4621      	mov	r1, r4
 80021b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021b6:	4621      	mov	r1, r4
 80021b8:	008a      	lsls	r2, r1, #2
 80021ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80021be:	f7fe f857 	bl	8000270 <__aeabi_uldivmod>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <LL_USART_SetBaudRate+0x458>)
 80021c8:	fba3 2302 	umull	r2, r3, r3, r2
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	b29c      	uxth	r4, r3
 80021d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021e2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80021e6:	4642      	mov	r2, r8
 80021e8:	464b      	mov	r3, r9
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	61b9      	str	r1, [r7, #24]
 80021ee:	415b      	adcs	r3, r3
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f6:	4641      	mov	r1, r8
 80021f8:	1851      	adds	r1, r2, r1
 80021fa:	6139      	str	r1, [r7, #16]
 80021fc:	4649      	mov	r1, r9
 80021fe:	414b      	adcs	r3, r1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800220e:	4659      	mov	r1, fp
 8002210:	00cb      	lsls	r3, r1, #3
 8002212:	4651      	mov	r1, sl
 8002214:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002218:	4651      	mov	r1, sl
 800221a:	00ca      	lsls	r2, r1, #3
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	4603      	mov	r3, r0
 8002222:	4642      	mov	r2, r8
 8002224:	189b      	adds	r3, r3, r2
 8002226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800222a:	464b      	mov	r3, r9
 800222c:	460a      	mov	r2, r1
 800222e:	eb42 0303 	adc.w	r3, r2, r3
 8002232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002236:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800223a:	2200      	movs	r2, #0
 800223c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002240:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8002250:	4649      	mov	r1, r9
 8002252:	008b      	lsls	r3, r1, #2
 8002254:	4641      	mov	r1, r8
 8002256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800225a:	4641      	mov	r1, r8
 800225c:	008a      	lsls	r2, r1, #2
 800225e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002262:	f7fe f805 	bl	8000270 <__aeabi_uldivmod>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4611      	mov	r1, r2
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <LL_USART_SetBaudRate+0x458>)
 800226e:	fba3 2301 	umull	r2, r3, r3, r1
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2264      	movs	r2, #100	@ 0x64
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	1acb      	subs	r3, r1, r3
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	3332      	adds	r3, #50	@ 0x32
 8002280:	4a36      	ldr	r2, [pc, #216]	@ (800235c <LL_USART_SetBaudRate+0x458>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b29b      	uxth	r3, r3
 800228a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800228e:	b29b      	uxth	r3, r3
 8002290:	4423      	add	r3, r4
 8002292:	b29c      	uxth	r4, r3
 8002294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002298:	2200      	movs	r2, #0
 800229a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800229c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800229e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022a2:	4642      	mov	r2, r8
 80022a4:	464b      	mov	r3, r9
 80022a6:	1891      	adds	r1, r2, r2
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	415b      	adcs	r3, r3
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b2:	4641      	mov	r1, r8
 80022b4:	1851      	adds	r1, r2, r1
 80022b6:	6039      	str	r1, [r7, #0]
 80022b8:	4649      	mov	r1, r9
 80022ba:	414b      	adcs	r3, r1
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022ca:	4659      	mov	r1, fp
 80022cc:	00cb      	lsls	r3, r1, #3
 80022ce:	4651      	mov	r1, sl
 80022d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022d4:	4651      	mov	r1, sl
 80022d6:	00ca      	lsls	r2, r1, #3
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	4603      	mov	r3, r0
 80022de:	4642      	mov	r2, r8
 80022e0:	189b      	adds	r3, r3, r2
 80022e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80022e4:	464b      	mov	r3, r9
 80022e6:	460a      	mov	r2, r1
 80022e8:	eb42 0303 	adc.w	r3, r2, r3
 80022ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80022ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80022f2:	2200      	movs	r2, #0
 80022f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8002304:	4649      	mov	r1, r9
 8002306:	008b      	lsls	r3, r1, #2
 8002308:	4641      	mov	r1, r8
 800230a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800230e:	4641      	mov	r1, r8
 8002310:	008a      	lsls	r2, r1, #2
 8002312:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002316:	f7fd ffab 	bl	8000270 <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <LL_USART_SetBaudRate+0x458>)
 8002320:	fba3 1302 	umull	r1, r3, r3, r2
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	2164      	movs	r1, #100	@ 0x64
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	3332      	adds	r3, #50	@ 0x32
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <LL_USART_SetBaudRate+0x458>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b29b      	uxth	r3, r3
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b29b      	uxth	r3, r3
 8002342:	4423      	add	r3, r4
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800234c:	609a      	str	r2, [r3, #8]
}
 800234e:	bf00      	nop
 8002350:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	51eb851f 	.word	0x51eb851f

08002360 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fd8c 	bl	8001e90 <LL_USART_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d15e      	bne.n	800243c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002386:	f023 030c 	bic.w	r3, r3, #12
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6851      	ldr	r1, [r2, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	4311      	orrs	r1, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	6912      	ldr	r2, [r2, #16]
 8002398:	4311      	orrs	r1, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	6992      	ldr	r2, [r2, #24]
 800239e:	430a      	orrs	r2, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fd83 	bl	8001eb8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fd90 	bl	8001ede <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9a8 	bl	8001718 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002448 <LL_USART_Init+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e021      	b.n	800241a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <LL_USART_Init+0xec>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d102      	bne.n	80023e4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e01a      	b.n	800241a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <LL_USART_Init+0xf0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d102      	bne.n	80023f2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e013      	b.n	800241a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <LL_USART_Init+0xf4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d102      	bne.n	8002400 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e00c      	b.n	800241a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <LL_USART_Init+0xf8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e005      	b.n	800241a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <LL_USART_Init+0xfc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fd64 	bl	8001f04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800243c:	7ffb      	ldrb	r3, [r7, #31]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40011000 	.word	0x40011000
 800244c:	40004400 	.word	0x40004400
 8002450:	40004800 	.word	0x40004800
 8002454:	40011400 	.word	0x40011400
 8002458:	40004c00 	.word	0x40004c00
 800245c:	40005000 	.word	0x40005000

08002460 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <LL_InitTick+0x30>)
 8002474:	3b01      	subs	r3, #1
 8002476:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <LL_InitTick+0x30>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <LL_InitTick+0x30>)
 8002480:	2205      	movs	r2, #5
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e010 	.word	0xe000e010

08002494 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800249c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffdd 	bl	8002460 <LL_InitTick>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <LL_SetSystemCoreClock+0x1c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000000 	.word	0x20000000

080024d0 <siprintf>:
 80024d0:	b40e      	push	{r1, r2, r3}
 80024d2:	b500      	push	{lr}
 80024d4:	b09c      	sub	sp, #112	@ 0x70
 80024d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80024d8:	9002      	str	r0, [sp, #8]
 80024da:	9006      	str	r0, [sp, #24]
 80024dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024e0:	4809      	ldr	r0, [pc, #36]	@ (8002508 <siprintf+0x38>)
 80024e2:	9107      	str	r1, [sp, #28]
 80024e4:	9104      	str	r1, [sp, #16]
 80024e6:	4909      	ldr	r1, [pc, #36]	@ (800250c <siprintf+0x3c>)
 80024e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ec:	9105      	str	r1, [sp, #20]
 80024ee:	6800      	ldr	r0, [r0, #0]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	a902      	add	r1, sp, #8
 80024f4:	f000 f994 	bl	8002820 <_svfiprintf_r>
 80024f8:	9b02      	ldr	r3, [sp, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	b01c      	add	sp, #112	@ 0x70
 8002500:	f85d eb04 	ldr.w	lr, [sp], #4
 8002504:	b003      	add	sp, #12
 8002506:	4770      	bx	lr
 8002508:	20000004 	.word	0x20000004
 800250c:	ffff0208 	.word	0xffff0208

08002510 <memset>:
 8002510:	4402      	add	r2, r0
 8002512:	4603      	mov	r3, r0
 8002514:	4293      	cmp	r3, r2
 8002516:	d100      	bne.n	800251a <memset+0xa>
 8002518:	4770      	bx	lr
 800251a:	f803 1b01 	strb.w	r1, [r3], #1
 800251e:	e7f9      	b.n	8002514 <memset+0x4>

08002520 <__errno>:
 8002520:	4b01      	ldr	r3, [pc, #4]	@ (8002528 <__errno+0x8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000004 	.word	0x20000004

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	4d0d      	ldr	r5, [pc, #52]	@ (8002564 <__libc_init_array+0x38>)
 8002530:	4c0d      	ldr	r4, [pc, #52]	@ (8002568 <__libc_init_array+0x3c>)
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	2600      	movs	r6, #0
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	4d0b      	ldr	r5, [pc, #44]	@ (800256c <__libc_init_array+0x40>)
 800253e:	4c0c      	ldr	r4, [pc, #48]	@ (8002570 <__libc_init_array+0x44>)
 8002540:	f000 fc66 	bl	8002e10 <_init>
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	2600      	movs	r6, #0
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	08002ebc 	.word	0x08002ebc
 8002568:	08002ebc 	.word	0x08002ebc
 800256c:	08002ebc 	.word	0x08002ebc
 8002570:	08002ec0 	.word	0x08002ec0

08002574 <__retarget_lock_acquire_recursive>:
 8002574:	4770      	bx	lr

08002576 <__retarget_lock_release_recursive>:
 8002576:	4770      	bx	lr

08002578 <_free_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4605      	mov	r5, r0
 800257c:	2900      	cmp	r1, #0
 800257e:	d041      	beq.n	8002604 <_free_r+0x8c>
 8002580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002584:	1f0c      	subs	r4, r1, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfb8      	it	lt
 800258a:	18e4      	addlt	r4, r4, r3
 800258c:	f000 f8e0 	bl	8002750 <__malloc_lock>
 8002590:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <_free_r+0x90>)
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	b933      	cbnz	r3, 80025a4 <_free_r+0x2c>
 8002596:	6063      	str	r3, [r4, #4]
 8002598:	6014      	str	r4, [r2, #0]
 800259a:	4628      	mov	r0, r5
 800259c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025a0:	f000 b8dc 	b.w	800275c <__malloc_unlock>
 80025a4:	42a3      	cmp	r3, r4
 80025a6:	d908      	bls.n	80025ba <_free_r+0x42>
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	1821      	adds	r1, r4, r0
 80025ac:	428b      	cmp	r3, r1
 80025ae:	bf01      	itttt	eq
 80025b0:	6819      	ldreq	r1, [r3, #0]
 80025b2:	685b      	ldreq	r3, [r3, #4]
 80025b4:	1809      	addeq	r1, r1, r0
 80025b6:	6021      	streq	r1, [r4, #0]
 80025b8:	e7ed      	b.n	8002596 <_free_r+0x1e>
 80025ba:	461a      	mov	r2, r3
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	b10b      	cbz	r3, 80025c4 <_free_r+0x4c>
 80025c0:	42a3      	cmp	r3, r4
 80025c2:	d9fa      	bls.n	80025ba <_free_r+0x42>
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	1850      	adds	r0, r2, r1
 80025c8:	42a0      	cmp	r0, r4
 80025ca:	d10b      	bne.n	80025e4 <_free_r+0x6c>
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	4401      	add	r1, r0
 80025d0:	1850      	adds	r0, r2, r1
 80025d2:	4283      	cmp	r3, r0
 80025d4:	6011      	str	r1, [r2, #0]
 80025d6:	d1e0      	bne.n	800259a <_free_r+0x22>
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	6053      	str	r3, [r2, #4]
 80025de:	4408      	add	r0, r1
 80025e0:	6010      	str	r0, [r2, #0]
 80025e2:	e7da      	b.n	800259a <_free_r+0x22>
 80025e4:	d902      	bls.n	80025ec <_free_r+0x74>
 80025e6:	230c      	movs	r3, #12
 80025e8:	602b      	str	r3, [r5, #0]
 80025ea:	e7d6      	b.n	800259a <_free_r+0x22>
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	1821      	adds	r1, r4, r0
 80025f0:	428b      	cmp	r3, r1
 80025f2:	bf04      	itt	eq
 80025f4:	6819      	ldreq	r1, [r3, #0]
 80025f6:	685b      	ldreq	r3, [r3, #4]
 80025f8:	6063      	str	r3, [r4, #4]
 80025fa:	bf04      	itt	eq
 80025fc:	1809      	addeq	r1, r1, r0
 80025fe:	6021      	streq	r1, [r4, #0]
 8002600:	6054      	str	r4, [r2, #4]
 8002602:	e7ca      	b.n	800259a <_free_r+0x22>
 8002604:	bd38      	pop	{r3, r4, r5, pc}
 8002606:	bf00      	nop
 8002608:	20000228 	.word	0x20000228

0800260c <sbrk_aligned>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	4e0f      	ldr	r6, [pc, #60]	@ (800264c <sbrk_aligned+0x40>)
 8002610:	460c      	mov	r4, r1
 8002612:	6831      	ldr	r1, [r6, #0]
 8002614:	4605      	mov	r5, r0
 8002616:	b911      	cbnz	r1, 800261e <sbrk_aligned+0x12>
 8002618:	f000 fba6 	bl	8002d68 <_sbrk_r>
 800261c:	6030      	str	r0, [r6, #0]
 800261e:	4621      	mov	r1, r4
 8002620:	4628      	mov	r0, r5
 8002622:	f000 fba1 	bl	8002d68 <_sbrk_r>
 8002626:	1c43      	adds	r3, r0, #1
 8002628:	d103      	bne.n	8002632 <sbrk_aligned+0x26>
 800262a:	f04f 34ff 	mov.w	r4, #4294967295
 800262e:	4620      	mov	r0, r4
 8002630:	bd70      	pop	{r4, r5, r6, pc}
 8002632:	1cc4      	adds	r4, r0, #3
 8002634:	f024 0403 	bic.w	r4, r4, #3
 8002638:	42a0      	cmp	r0, r4
 800263a:	d0f8      	beq.n	800262e <sbrk_aligned+0x22>
 800263c:	1a21      	subs	r1, r4, r0
 800263e:	4628      	mov	r0, r5
 8002640:	f000 fb92 	bl	8002d68 <_sbrk_r>
 8002644:	3001      	adds	r0, #1
 8002646:	d1f2      	bne.n	800262e <sbrk_aligned+0x22>
 8002648:	e7ef      	b.n	800262a <sbrk_aligned+0x1e>
 800264a:	bf00      	nop
 800264c:	20000224 	.word	0x20000224

08002650 <_malloc_r>:
 8002650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002654:	1ccd      	adds	r5, r1, #3
 8002656:	f025 0503 	bic.w	r5, r5, #3
 800265a:	3508      	adds	r5, #8
 800265c:	2d0c      	cmp	r5, #12
 800265e:	bf38      	it	cc
 8002660:	250c      	movcc	r5, #12
 8002662:	2d00      	cmp	r5, #0
 8002664:	4606      	mov	r6, r0
 8002666:	db01      	blt.n	800266c <_malloc_r+0x1c>
 8002668:	42a9      	cmp	r1, r5
 800266a:	d904      	bls.n	8002676 <_malloc_r+0x26>
 800266c:	230c      	movs	r3, #12
 800266e:	6033      	str	r3, [r6, #0]
 8002670:	2000      	movs	r0, #0
 8002672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800274c <_malloc_r+0xfc>
 800267a:	f000 f869 	bl	8002750 <__malloc_lock>
 800267e:	f8d8 3000 	ldr.w	r3, [r8]
 8002682:	461c      	mov	r4, r3
 8002684:	bb44      	cbnz	r4, 80026d8 <_malloc_r+0x88>
 8002686:	4629      	mov	r1, r5
 8002688:	4630      	mov	r0, r6
 800268a:	f7ff ffbf 	bl	800260c <sbrk_aligned>
 800268e:	1c43      	adds	r3, r0, #1
 8002690:	4604      	mov	r4, r0
 8002692:	d158      	bne.n	8002746 <_malloc_r+0xf6>
 8002694:	f8d8 4000 	ldr.w	r4, [r8]
 8002698:	4627      	mov	r7, r4
 800269a:	2f00      	cmp	r7, #0
 800269c:	d143      	bne.n	8002726 <_malloc_r+0xd6>
 800269e:	2c00      	cmp	r4, #0
 80026a0:	d04b      	beq.n	800273a <_malloc_r+0xea>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	4639      	mov	r1, r7
 80026a6:	4630      	mov	r0, r6
 80026a8:	eb04 0903 	add.w	r9, r4, r3
 80026ac:	f000 fb5c 	bl	8002d68 <_sbrk_r>
 80026b0:	4581      	cmp	r9, r0
 80026b2:	d142      	bne.n	800273a <_malloc_r+0xea>
 80026b4:	6821      	ldr	r1, [r4, #0]
 80026b6:	1a6d      	subs	r5, r5, r1
 80026b8:	4629      	mov	r1, r5
 80026ba:	4630      	mov	r0, r6
 80026bc:	f7ff ffa6 	bl	800260c <sbrk_aligned>
 80026c0:	3001      	adds	r0, #1
 80026c2:	d03a      	beq.n	800273a <_malloc_r+0xea>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	442b      	add	r3, r5
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	f8d8 3000 	ldr.w	r3, [r8]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	bb62      	cbnz	r2, 800272c <_malloc_r+0xdc>
 80026d2:	f8c8 7000 	str.w	r7, [r8]
 80026d6:	e00f      	b.n	80026f8 <_malloc_r+0xa8>
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	1b52      	subs	r2, r2, r5
 80026dc:	d420      	bmi.n	8002720 <_malloc_r+0xd0>
 80026de:	2a0b      	cmp	r2, #11
 80026e0:	d917      	bls.n	8002712 <_malloc_r+0xc2>
 80026e2:	1961      	adds	r1, r4, r5
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	6025      	str	r5, [r4, #0]
 80026e8:	bf18      	it	ne
 80026ea:	6059      	strne	r1, [r3, #4]
 80026ec:	6863      	ldr	r3, [r4, #4]
 80026ee:	bf08      	it	eq
 80026f0:	f8c8 1000 	streq.w	r1, [r8]
 80026f4:	5162      	str	r2, [r4, r5]
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	4630      	mov	r0, r6
 80026fa:	f000 f82f 	bl	800275c <__malloc_unlock>
 80026fe:	f104 000b 	add.w	r0, r4, #11
 8002702:	1d23      	adds	r3, r4, #4
 8002704:	f020 0007 	bic.w	r0, r0, #7
 8002708:	1ac2      	subs	r2, r0, r3
 800270a:	bf1c      	itt	ne
 800270c:	1a1b      	subne	r3, r3, r0
 800270e:	50a3      	strne	r3, [r4, r2]
 8002710:	e7af      	b.n	8002672 <_malloc_r+0x22>
 8002712:	6862      	ldr	r2, [r4, #4]
 8002714:	42a3      	cmp	r3, r4
 8002716:	bf0c      	ite	eq
 8002718:	f8c8 2000 	streq.w	r2, [r8]
 800271c:	605a      	strne	r2, [r3, #4]
 800271e:	e7eb      	b.n	80026f8 <_malloc_r+0xa8>
 8002720:	4623      	mov	r3, r4
 8002722:	6864      	ldr	r4, [r4, #4]
 8002724:	e7ae      	b.n	8002684 <_malloc_r+0x34>
 8002726:	463c      	mov	r4, r7
 8002728:	687f      	ldr	r7, [r7, #4]
 800272a:	e7b6      	b.n	800269a <_malloc_r+0x4a>
 800272c:	461a      	mov	r2, r3
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	42a3      	cmp	r3, r4
 8002732:	d1fb      	bne.n	800272c <_malloc_r+0xdc>
 8002734:	2300      	movs	r3, #0
 8002736:	6053      	str	r3, [r2, #4]
 8002738:	e7de      	b.n	80026f8 <_malloc_r+0xa8>
 800273a:	230c      	movs	r3, #12
 800273c:	6033      	str	r3, [r6, #0]
 800273e:	4630      	mov	r0, r6
 8002740:	f000 f80c 	bl	800275c <__malloc_unlock>
 8002744:	e794      	b.n	8002670 <_malloc_r+0x20>
 8002746:	6005      	str	r5, [r0, #0]
 8002748:	e7d6      	b.n	80026f8 <_malloc_r+0xa8>
 800274a:	bf00      	nop
 800274c:	20000228 	.word	0x20000228

08002750 <__malloc_lock>:
 8002750:	4801      	ldr	r0, [pc, #4]	@ (8002758 <__malloc_lock+0x8>)
 8002752:	f7ff bf0f 	b.w	8002574 <__retarget_lock_acquire_recursive>
 8002756:	bf00      	nop
 8002758:	20000220 	.word	0x20000220

0800275c <__malloc_unlock>:
 800275c:	4801      	ldr	r0, [pc, #4]	@ (8002764 <__malloc_unlock+0x8>)
 800275e:	f7ff bf0a 	b.w	8002576 <__retarget_lock_release_recursive>
 8002762:	bf00      	nop
 8002764:	20000220 	.word	0x20000220

08002768 <__ssputs_r>:
 8002768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276c:	688e      	ldr	r6, [r1, #8]
 800276e:	461f      	mov	r7, r3
 8002770:	42be      	cmp	r6, r7
 8002772:	680b      	ldr	r3, [r1, #0]
 8002774:	4682      	mov	sl, r0
 8002776:	460c      	mov	r4, r1
 8002778:	4690      	mov	r8, r2
 800277a:	d82d      	bhi.n	80027d8 <__ssputs_r+0x70>
 800277c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002784:	d026      	beq.n	80027d4 <__ssputs_r+0x6c>
 8002786:	6965      	ldr	r5, [r4, #20]
 8002788:	6909      	ldr	r1, [r1, #16]
 800278a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800278e:	eba3 0901 	sub.w	r9, r3, r1
 8002792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002796:	1c7b      	adds	r3, r7, #1
 8002798:	444b      	add	r3, r9
 800279a:	106d      	asrs	r5, r5, #1
 800279c:	429d      	cmp	r5, r3
 800279e:	bf38      	it	cc
 80027a0:	461d      	movcc	r5, r3
 80027a2:	0553      	lsls	r3, r2, #21
 80027a4:	d527      	bpl.n	80027f6 <__ssputs_r+0x8e>
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7ff ff52 	bl	8002650 <_malloc_r>
 80027ac:	4606      	mov	r6, r0
 80027ae:	b360      	cbz	r0, 800280a <__ssputs_r+0xa2>
 80027b0:	6921      	ldr	r1, [r4, #16]
 80027b2:	464a      	mov	r2, r9
 80027b4:	f000 fae8 	bl	8002d88 <memcpy>
 80027b8:	89a3      	ldrh	r3, [r4, #12]
 80027ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c2:	81a3      	strh	r3, [r4, #12]
 80027c4:	6126      	str	r6, [r4, #16]
 80027c6:	6165      	str	r5, [r4, #20]
 80027c8:	444e      	add	r6, r9
 80027ca:	eba5 0509 	sub.w	r5, r5, r9
 80027ce:	6026      	str	r6, [r4, #0]
 80027d0:	60a5      	str	r5, [r4, #8]
 80027d2:	463e      	mov	r6, r7
 80027d4:	42be      	cmp	r6, r7
 80027d6:	d900      	bls.n	80027da <__ssputs_r+0x72>
 80027d8:	463e      	mov	r6, r7
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	4632      	mov	r2, r6
 80027de:	4641      	mov	r1, r8
 80027e0:	f000 faa8 	bl	8002d34 <memmove>
 80027e4:	68a3      	ldr	r3, [r4, #8]
 80027e6:	1b9b      	subs	r3, r3, r6
 80027e8:	60a3      	str	r3, [r4, #8]
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	4433      	add	r3, r6
 80027ee:	6023      	str	r3, [r4, #0]
 80027f0:	2000      	movs	r0, #0
 80027f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f6:	462a      	mov	r2, r5
 80027f8:	f000 fad4 	bl	8002da4 <_realloc_r>
 80027fc:	4606      	mov	r6, r0
 80027fe:	2800      	cmp	r0, #0
 8002800:	d1e0      	bne.n	80027c4 <__ssputs_r+0x5c>
 8002802:	6921      	ldr	r1, [r4, #16]
 8002804:	4650      	mov	r0, sl
 8002806:	f7ff feb7 	bl	8002578 <_free_r>
 800280a:	230c      	movs	r3, #12
 800280c:	f8ca 3000 	str.w	r3, [sl]
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	e7e9      	b.n	80027f2 <__ssputs_r+0x8a>
	...

08002820 <_svfiprintf_r>:
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002824:	4698      	mov	r8, r3
 8002826:	898b      	ldrh	r3, [r1, #12]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	b09d      	sub	sp, #116	@ 0x74
 800282c:	4607      	mov	r7, r0
 800282e:	460d      	mov	r5, r1
 8002830:	4614      	mov	r4, r2
 8002832:	d510      	bpl.n	8002856 <_svfiprintf_r+0x36>
 8002834:	690b      	ldr	r3, [r1, #16]
 8002836:	b973      	cbnz	r3, 8002856 <_svfiprintf_r+0x36>
 8002838:	2140      	movs	r1, #64	@ 0x40
 800283a:	f7ff ff09 	bl	8002650 <_malloc_r>
 800283e:	6028      	str	r0, [r5, #0]
 8002840:	6128      	str	r0, [r5, #16]
 8002842:	b930      	cbnz	r0, 8002852 <_svfiprintf_r+0x32>
 8002844:	230c      	movs	r3, #12
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	b01d      	add	sp, #116	@ 0x74
 800284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002852:	2340      	movs	r3, #64	@ 0x40
 8002854:	616b      	str	r3, [r5, #20]
 8002856:	2300      	movs	r3, #0
 8002858:	9309      	str	r3, [sp, #36]	@ 0x24
 800285a:	2320      	movs	r3, #32
 800285c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002860:	f8cd 800c 	str.w	r8, [sp, #12]
 8002864:	2330      	movs	r3, #48	@ 0x30
 8002866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002a04 <_svfiprintf_r+0x1e4>
 800286a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800286e:	f04f 0901 	mov.w	r9, #1
 8002872:	4623      	mov	r3, r4
 8002874:	469a      	mov	sl, r3
 8002876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800287a:	b10a      	cbz	r2, 8002880 <_svfiprintf_r+0x60>
 800287c:	2a25      	cmp	r2, #37	@ 0x25
 800287e:	d1f9      	bne.n	8002874 <_svfiprintf_r+0x54>
 8002880:	ebba 0b04 	subs.w	fp, sl, r4
 8002884:	d00b      	beq.n	800289e <_svfiprintf_r+0x7e>
 8002886:	465b      	mov	r3, fp
 8002888:	4622      	mov	r2, r4
 800288a:	4629      	mov	r1, r5
 800288c:	4638      	mov	r0, r7
 800288e:	f7ff ff6b 	bl	8002768 <__ssputs_r>
 8002892:	3001      	adds	r0, #1
 8002894:	f000 80a7 	beq.w	80029e6 <_svfiprintf_r+0x1c6>
 8002898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800289a:	445a      	add	r2, fp
 800289c:	9209      	str	r2, [sp, #36]	@ 0x24
 800289e:	f89a 3000 	ldrb.w	r3, [sl]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 809f 	beq.w	80029e6 <_svfiprintf_r+0x1c6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	f04f 32ff 	mov.w	r2, #4294967295
 80028ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028b2:	f10a 0a01 	add.w	sl, sl, #1
 80028b6:	9304      	str	r3, [sp, #16]
 80028b8:	9307      	str	r3, [sp, #28]
 80028ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028be:	931a      	str	r3, [sp, #104]	@ 0x68
 80028c0:	4654      	mov	r4, sl
 80028c2:	2205      	movs	r2, #5
 80028c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028c8:	484e      	ldr	r0, [pc, #312]	@ (8002a04 <_svfiprintf_r+0x1e4>)
 80028ca:	f7fd fc81 	bl	80001d0 <memchr>
 80028ce:	9a04      	ldr	r2, [sp, #16]
 80028d0:	b9d8      	cbnz	r0, 800290a <_svfiprintf_r+0xea>
 80028d2:	06d0      	lsls	r0, r2, #27
 80028d4:	bf44      	itt	mi
 80028d6:	2320      	movmi	r3, #32
 80028d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028dc:	0711      	lsls	r1, r2, #28
 80028de:	bf44      	itt	mi
 80028e0:	232b      	movmi	r3, #43	@ 0x2b
 80028e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028e6:	f89a 3000 	ldrb.w	r3, [sl]
 80028ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ec:	d015      	beq.n	800291a <_svfiprintf_r+0xfa>
 80028ee:	9a07      	ldr	r2, [sp, #28]
 80028f0:	4654      	mov	r4, sl
 80028f2:	2000      	movs	r0, #0
 80028f4:	f04f 0c0a 	mov.w	ip, #10
 80028f8:	4621      	mov	r1, r4
 80028fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028fe:	3b30      	subs	r3, #48	@ 0x30
 8002900:	2b09      	cmp	r3, #9
 8002902:	d94b      	bls.n	800299c <_svfiprintf_r+0x17c>
 8002904:	b1b0      	cbz	r0, 8002934 <_svfiprintf_r+0x114>
 8002906:	9207      	str	r2, [sp, #28]
 8002908:	e014      	b.n	8002934 <_svfiprintf_r+0x114>
 800290a:	eba0 0308 	sub.w	r3, r0, r8
 800290e:	fa09 f303 	lsl.w	r3, r9, r3
 8002912:	4313      	orrs	r3, r2
 8002914:	9304      	str	r3, [sp, #16]
 8002916:	46a2      	mov	sl, r4
 8002918:	e7d2      	b.n	80028c0 <_svfiprintf_r+0xa0>
 800291a:	9b03      	ldr	r3, [sp, #12]
 800291c:	1d19      	adds	r1, r3, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	9103      	str	r1, [sp, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	bfbb      	ittet	lt
 8002926:	425b      	neglt	r3, r3
 8002928:	f042 0202 	orrlt.w	r2, r2, #2
 800292c:	9307      	strge	r3, [sp, #28]
 800292e:	9307      	strlt	r3, [sp, #28]
 8002930:	bfb8      	it	lt
 8002932:	9204      	strlt	r2, [sp, #16]
 8002934:	7823      	ldrb	r3, [r4, #0]
 8002936:	2b2e      	cmp	r3, #46	@ 0x2e
 8002938:	d10a      	bne.n	8002950 <_svfiprintf_r+0x130>
 800293a:	7863      	ldrb	r3, [r4, #1]
 800293c:	2b2a      	cmp	r3, #42	@ 0x2a
 800293e:	d132      	bne.n	80029a6 <_svfiprintf_r+0x186>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	9203      	str	r2, [sp, #12]
 8002948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800294c:	3402      	adds	r4, #2
 800294e:	9305      	str	r3, [sp, #20]
 8002950:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002a14 <_svfiprintf_r+0x1f4>
 8002954:	7821      	ldrb	r1, [r4, #0]
 8002956:	2203      	movs	r2, #3
 8002958:	4650      	mov	r0, sl
 800295a:	f7fd fc39 	bl	80001d0 <memchr>
 800295e:	b138      	cbz	r0, 8002970 <_svfiprintf_r+0x150>
 8002960:	9b04      	ldr	r3, [sp, #16]
 8002962:	eba0 000a 	sub.w	r0, r0, sl
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	4082      	lsls	r2, r0
 800296a:	4313      	orrs	r3, r2
 800296c:	3401      	adds	r4, #1
 800296e:	9304      	str	r3, [sp, #16]
 8002970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002974:	4824      	ldr	r0, [pc, #144]	@ (8002a08 <_svfiprintf_r+0x1e8>)
 8002976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800297a:	2206      	movs	r2, #6
 800297c:	f7fd fc28 	bl	80001d0 <memchr>
 8002980:	2800      	cmp	r0, #0
 8002982:	d036      	beq.n	80029f2 <_svfiprintf_r+0x1d2>
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <_svfiprintf_r+0x1ec>)
 8002986:	bb1b      	cbnz	r3, 80029d0 <_svfiprintf_r+0x1b0>
 8002988:	9b03      	ldr	r3, [sp, #12]
 800298a:	3307      	adds	r3, #7
 800298c:	f023 0307 	bic.w	r3, r3, #7
 8002990:	3308      	adds	r3, #8
 8002992:	9303      	str	r3, [sp, #12]
 8002994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002996:	4433      	add	r3, r6
 8002998:	9309      	str	r3, [sp, #36]	@ 0x24
 800299a:	e76a      	b.n	8002872 <_svfiprintf_r+0x52>
 800299c:	fb0c 3202 	mla	r2, ip, r2, r3
 80029a0:	460c      	mov	r4, r1
 80029a2:	2001      	movs	r0, #1
 80029a4:	e7a8      	b.n	80028f8 <_svfiprintf_r+0xd8>
 80029a6:	2300      	movs	r3, #0
 80029a8:	3401      	adds	r4, #1
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0c0a 	mov.w	ip, #10
 80029b2:	4620      	mov	r0, r4
 80029b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b8:	3a30      	subs	r2, #48	@ 0x30
 80029ba:	2a09      	cmp	r2, #9
 80029bc:	d903      	bls.n	80029c6 <_svfiprintf_r+0x1a6>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0c6      	beq.n	8002950 <_svfiprintf_r+0x130>
 80029c2:	9105      	str	r1, [sp, #20]
 80029c4:	e7c4      	b.n	8002950 <_svfiprintf_r+0x130>
 80029c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80029ca:	4604      	mov	r4, r0
 80029cc:	2301      	movs	r3, #1
 80029ce:	e7f0      	b.n	80029b2 <_svfiprintf_r+0x192>
 80029d0:	ab03      	add	r3, sp, #12
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	462a      	mov	r2, r5
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <_svfiprintf_r+0x1f0>)
 80029d8:	a904      	add	r1, sp, #16
 80029da:	4638      	mov	r0, r7
 80029dc:	f3af 8000 	nop.w
 80029e0:	1c42      	adds	r2, r0, #1
 80029e2:	4606      	mov	r6, r0
 80029e4:	d1d6      	bne.n	8002994 <_svfiprintf_r+0x174>
 80029e6:	89ab      	ldrh	r3, [r5, #12]
 80029e8:	065b      	lsls	r3, r3, #25
 80029ea:	f53f af2d 	bmi.w	8002848 <_svfiprintf_r+0x28>
 80029ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029f0:	e72c      	b.n	800284c <_svfiprintf_r+0x2c>
 80029f2:	ab03      	add	r3, sp, #12
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	462a      	mov	r2, r5
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <_svfiprintf_r+0x1f0>)
 80029fa:	a904      	add	r1, sp, #16
 80029fc:	4638      	mov	r0, r7
 80029fe:	f000 f879 	bl	8002af4 <_printf_i>
 8002a02:	e7ed      	b.n	80029e0 <_svfiprintf_r+0x1c0>
 8002a04:	08002e80 	.word	0x08002e80
 8002a08:	08002e8a 	.word	0x08002e8a
 8002a0c:	00000000 	.word	0x00000000
 8002a10:	08002769 	.word	0x08002769
 8002a14:	08002e86 	.word	0x08002e86

08002a18 <_printf_common>:
 8002a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	4616      	mov	r6, r2
 8002a1e:	4698      	mov	r8, r3
 8002a20:	688a      	ldr	r2, [r1, #8]
 8002a22:	690b      	ldr	r3, [r1, #16]
 8002a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bfb8      	it	lt
 8002a2c:	4613      	movlt	r3, r2
 8002a2e:	6033      	str	r3, [r6, #0]
 8002a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a34:	4607      	mov	r7, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	b10a      	cbz	r2, 8002a3e <_printf_common+0x26>
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	6033      	str	r3, [r6, #0]
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	0699      	lsls	r1, r3, #26
 8002a42:	bf42      	ittt	mi
 8002a44:	6833      	ldrmi	r3, [r6, #0]
 8002a46:	3302      	addmi	r3, #2
 8002a48:	6033      	strmi	r3, [r6, #0]
 8002a4a:	6825      	ldr	r5, [r4, #0]
 8002a4c:	f015 0506 	ands.w	r5, r5, #6
 8002a50:	d106      	bne.n	8002a60 <_printf_common+0x48>
 8002a52:	f104 0a19 	add.w	sl, r4, #25
 8002a56:	68e3      	ldr	r3, [r4, #12]
 8002a58:	6832      	ldr	r2, [r6, #0]
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	42ab      	cmp	r3, r5
 8002a5e:	dc26      	bgt.n	8002aae <_printf_common+0x96>
 8002a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	3b00      	subs	r3, #0
 8002a68:	bf18      	it	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	0692      	lsls	r2, r2, #26
 8002a6e:	d42b      	bmi.n	8002ac8 <_printf_common+0xb0>
 8002a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a74:	4641      	mov	r1, r8
 8002a76:	4638      	mov	r0, r7
 8002a78:	47c8      	blx	r9
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d01e      	beq.n	8002abc <_printf_common+0xa4>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	6922      	ldr	r2, [r4, #16]
 8002a82:	f003 0306 	and.w	r3, r3, #6
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf02      	ittt	eq
 8002a8a:	68e5      	ldreq	r5, [r4, #12]
 8002a8c:	6833      	ldreq	r3, [r6, #0]
 8002a8e:	1aed      	subeq	r5, r5, r3
 8002a90:	68a3      	ldr	r3, [r4, #8]
 8002a92:	bf0c      	ite	eq
 8002a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a98:	2500      	movne	r5, #0
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	bfc4      	itt	gt
 8002a9e:	1a9b      	subgt	r3, r3, r2
 8002aa0:	18ed      	addgt	r5, r5, r3
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	341a      	adds	r4, #26
 8002aa6:	42b5      	cmp	r5, r6
 8002aa8:	d11a      	bne.n	8002ae0 <_printf_common+0xc8>
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e008      	b.n	8002ac0 <_printf_common+0xa8>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	4652      	mov	r2, sl
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	47c8      	blx	r9
 8002ab8:	3001      	adds	r0, #1
 8002aba:	d103      	bne.n	8002ac4 <_printf_common+0xac>
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac4:	3501      	adds	r5, #1
 8002ac6:	e7c6      	b.n	8002a56 <_printf_common+0x3e>
 8002ac8:	18e1      	adds	r1, r4, r3
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	2030      	movs	r0, #48	@ 0x30
 8002ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ad2:	4422      	add	r2, r4
 8002ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002adc:	3302      	adds	r3, #2
 8002ade:	e7c7      	b.n	8002a70 <_printf_common+0x58>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	47c8      	blx	r9
 8002aea:	3001      	adds	r0, #1
 8002aec:	d0e6      	beq.n	8002abc <_printf_common+0xa4>
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7d9      	b.n	8002aa6 <_printf_common+0x8e>
	...

08002af4 <_printf_i>:
 8002af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af8:	7e0f      	ldrb	r7, [r1, #24]
 8002afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002afc:	2f78      	cmp	r7, #120	@ 0x78
 8002afe:	4691      	mov	r9, r2
 8002b00:	4680      	mov	r8, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	469a      	mov	sl, r3
 8002b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b0a:	d807      	bhi.n	8002b1c <_printf_i+0x28>
 8002b0c:	2f62      	cmp	r7, #98	@ 0x62
 8002b0e:	d80a      	bhi.n	8002b26 <_printf_i+0x32>
 8002b10:	2f00      	cmp	r7, #0
 8002b12:	f000 80d2 	beq.w	8002cba <_printf_i+0x1c6>
 8002b16:	2f58      	cmp	r7, #88	@ 0x58
 8002b18:	f000 80b9 	beq.w	8002c8e <_printf_i+0x19a>
 8002b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b24:	e03a      	b.n	8002b9c <_printf_i+0xa8>
 8002b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b2a:	2b15      	cmp	r3, #21
 8002b2c:	d8f6      	bhi.n	8002b1c <_printf_i+0x28>
 8002b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8002b34 <_printf_i+0x40>)
 8002b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b34:	08002b8d 	.word	0x08002b8d
 8002b38:	08002ba1 	.word	0x08002ba1
 8002b3c:	08002b1d 	.word	0x08002b1d
 8002b40:	08002b1d 	.word	0x08002b1d
 8002b44:	08002b1d 	.word	0x08002b1d
 8002b48:	08002b1d 	.word	0x08002b1d
 8002b4c:	08002ba1 	.word	0x08002ba1
 8002b50:	08002b1d 	.word	0x08002b1d
 8002b54:	08002b1d 	.word	0x08002b1d
 8002b58:	08002b1d 	.word	0x08002b1d
 8002b5c:	08002b1d 	.word	0x08002b1d
 8002b60:	08002ca1 	.word	0x08002ca1
 8002b64:	08002bcb 	.word	0x08002bcb
 8002b68:	08002c5b 	.word	0x08002c5b
 8002b6c:	08002b1d 	.word	0x08002b1d
 8002b70:	08002b1d 	.word	0x08002b1d
 8002b74:	08002cc3 	.word	0x08002cc3
 8002b78:	08002b1d 	.word	0x08002b1d
 8002b7c:	08002bcb 	.word	0x08002bcb
 8002b80:	08002b1d 	.word	0x08002b1d
 8002b84:	08002b1d 	.word	0x08002b1d
 8002b88:	08002c63 	.word	0x08002c63
 8002b8c:	6833      	ldr	r3, [r6, #0]
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6032      	str	r2, [r6, #0]
 8002b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e09d      	b.n	8002cdc <_printf_i+0x1e8>
 8002ba0:	6833      	ldr	r3, [r6, #0]
 8002ba2:	6820      	ldr	r0, [r4, #0]
 8002ba4:	1d19      	adds	r1, r3, #4
 8002ba6:	6031      	str	r1, [r6, #0]
 8002ba8:	0606      	lsls	r6, r0, #24
 8002baa:	d501      	bpl.n	8002bb0 <_printf_i+0xbc>
 8002bac:	681d      	ldr	r5, [r3, #0]
 8002bae:	e003      	b.n	8002bb8 <_printf_i+0xc4>
 8002bb0:	0645      	lsls	r5, r0, #25
 8002bb2:	d5fb      	bpl.n	8002bac <_printf_i+0xb8>
 8002bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	da03      	bge.n	8002bc4 <_printf_i+0xd0>
 8002bbc:	232d      	movs	r3, #45	@ 0x2d
 8002bbe:	426d      	negs	r5, r5
 8002bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bc4:	4859      	ldr	r0, [pc, #356]	@ (8002d2c <_printf_i+0x238>)
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	e011      	b.n	8002bee <_printf_i+0xfa>
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	6833      	ldr	r3, [r6, #0]
 8002bce:	0608      	lsls	r0, r1, #24
 8002bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bd4:	d402      	bmi.n	8002bdc <_printf_i+0xe8>
 8002bd6:	0649      	lsls	r1, r1, #25
 8002bd8:	bf48      	it	mi
 8002bda:	b2ad      	uxthmi	r5, r5
 8002bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bde:	4853      	ldr	r0, [pc, #332]	@ (8002d2c <_printf_i+0x238>)
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	bf14      	ite	ne
 8002be4:	230a      	movne	r3, #10
 8002be6:	2308      	moveq	r3, #8
 8002be8:	2100      	movs	r1, #0
 8002bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bee:	6866      	ldr	r6, [r4, #4]
 8002bf0:	60a6      	str	r6, [r4, #8]
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	bfa2      	ittt	ge
 8002bf6:	6821      	ldrge	r1, [r4, #0]
 8002bf8:	f021 0104 	bicge.w	r1, r1, #4
 8002bfc:	6021      	strge	r1, [r4, #0]
 8002bfe:	b90d      	cbnz	r5, 8002c04 <_printf_i+0x110>
 8002c00:	2e00      	cmp	r6, #0
 8002c02:	d04b      	beq.n	8002c9c <_printf_i+0x1a8>
 8002c04:	4616      	mov	r6, r2
 8002c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8002c0e:	5dc7      	ldrb	r7, [r0, r7]
 8002c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c14:	462f      	mov	r7, r5
 8002c16:	42bb      	cmp	r3, r7
 8002c18:	460d      	mov	r5, r1
 8002c1a:	d9f4      	bls.n	8002c06 <_printf_i+0x112>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10b      	bne.n	8002c38 <_printf_i+0x144>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	07df      	lsls	r7, r3, #31
 8002c24:	d508      	bpl.n	8002c38 <_printf_i+0x144>
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	6861      	ldr	r1, [r4, #4]
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	bfde      	ittt	le
 8002c2e:	2330      	movle	r3, #48	@ 0x30
 8002c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c38:	1b92      	subs	r2, r2, r6
 8002c3a:	6122      	str	r2, [r4, #16]
 8002c3c:	f8cd a000 	str.w	sl, [sp]
 8002c40:	464b      	mov	r3, r9
 8002c42:	aa03      	add	r2, sp, #12
 8002c44:	4621      	mov	r1, r4
 8002c46:	4640      	mov	r0, r8
 8002c48:	f7ff fee6 	bl	8002a18 <_printf_common>
 8002c4c:	3001      	adds	r0, #1
 8002c4e:	d14a      	bne.n	8002ce6 <_printf_i+0x1f2>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b004      	add	sp, #16
 8002c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	4833      	ldr	r0, [pc, #204]	@ (8002d30 <_printf_i+0x23c>)
 8002c64:	2778      	movs	r7, #120	@ 0x78
 8002c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	6831      	ldr	r1, [r6, #0]
 8002c6e:	061f      	lsls	r7, r3, #24
 8002c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c74:	d402      	bmi.n	8002c7c <_printf_i+0x188>
 8002c76:	065f      	lsls	r7, r3, #25
 8002c78:	bf48      	it	mi
 8002c7a:	b2ad      	uxthmi	r5, r5
 8002c7c:	6031      	str	r1, [r6, #0]
 8002c7e:	07d9      	lsls	r1, r3, #31
 8002c80:	bf44      	itt	mi
 8002c82:	f043 0320 	orrmi.w	r3, r3, #32
 8002c86:	6023      	strmi	r3, [r4, #0]
 8002c88:	b11d      	cbz	r5, 8002c92 <_printf_i+0x19e>
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	e7ac      	b.n	8002be8 <_printf_i+0xf4>
 8002c8e:	4827      	ldr	r0, [pc, #156]	@ (8002d2c <_printf_i+0x238>)
 8002c90:	e7e9      	b.n	8002c66 <_printf_i+0x172>
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f023 0320 	bic.w	r3, r3, #32
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	e7f6      	b.n	8002c8a <_printf_i+0x196>
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	e7bd      	b.n	8002c1c <_printf_i+0x128>
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	6825      	ldr	r5, [r4, #0]
 8002ca4:	6961      	ldr	r1, [r4, #20]
 8002ca6:	1d18      	adds	r0, r3, #4
 8002ca8:	6030      	str	r0, [r6, #0]
 8002caa:	062e      	lsls	r6, r5, #24
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	d501      	bpl.n	8002cb4 <_printf_i+0x1c0>
 8002cb0:	6019      	str	r1, [r3, #0]
 8002cb2:	e002      	b.n	8002cba <_printf_i+0x1c6>
 8002cb4:	0668      	lsls	r0, r5, #25
 8002cb6:	d5fb      	bpl.n	8002cb0 <_printf_i+0x1bc>
 8002cb8:	8019      	strh	r1, [r3, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6123      	str	r3, [r4, #16]
 8002cbe:	4616      	mov	r6, r2
 8002cc0:	e7bc      	b.n	8002c3c <_printf_i+0x148>
 8002cc2:	6833      	ldr	r3, [r6, #0]
 8002cc4:	1d1a      	adds	r2, r3, #4
 8002cc6:	6032      	str	r2, [r6, #0]
 8002cc8:	681e      	ldr	r6, [r3, #0]
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f7fd fa7e 	bl	80001d0 <memchr>
 8002cd4:	b108      	cbz	r0, 8002cda <_printf_i+0x1e6>
 8002cd6:	1b80      	subs	r0, r0, r6
 8002cd8:	6060      	str	r0, [r4, #4]
 8002cda:	6863      	ldr	r3, [r4, #4]
 8002cdc:	6123      	str	r3, [r4, #16]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ce4:	e7aa      	b.n	8002c3c <_printf_i+0x148>
 8002ce6:	6923      	ldr	r3, [r4, #16]
 8002ce8:	4632      	mov	r2, r6
 8002cea:	4649      	mov	r1, r9
 8002cec:	4640      	mov	r0, r8
 8002cee:	47d0      	blx	sl
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d0ad      	beq.n	8002c50 <_printf_i+0x15c>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	079b      	lsls	r3, r3, #30
 8002cf8:	d413      	bmi.n	8002d22 <_printf_i+0x22e>
 8002cfa:	68e0      	ldr	r0, [r4, #12]
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	bfb8      	it	lt
 8002d02:	4618      	movlt	r0, r3
 8002d04:	e7a6      	b.n	8002c54 <_printf_i+0x160>
 8002d06:	2301      	movs	r3, #1
 8002d08:	4632      	mov	r2, r6
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	47d0      	blx	sl
 8002d10:	3001      	adds	r0, #1
 8002d12:	d09d      	beq.n	8002c50 <_printf_i+0x15c>
 8002d14:	3501      	adds	r5, #1
 8002d16:	68e3      	ldr	r3, [r4, #12]
 8002d18:	9903      	ldr	r1, [sp, #12]
 8002d1a:	1a5b      	subs	r3, r3, r1
 8002d1c:	42ab      	cmp	r3, r5
 8002d1e:	dcf2      	bgt.n	8002d06 <_printf_i+0x212>
 8002d20:	e7eb      	b.n	8002cfa <_printf_i+0x206>
 8002d22:	2500      	movs	r5, #0
 8002d24:	f104 0619 	add.w	r6, r4, #25
 8002d28:	e7f5      	b.n	8002d16 <_printf_i+0x222>
 8002d2a:	bf00      	nop
 8002d2c:	08002e91 	.word	0x08002e91
 8002d30:	08002ea2 	.word	0x08002ea2

08002d34 <memmove>:
 8002d34:	4288      	cmp	r0, r1
 8002d36:	b510      	push	{r4, lr}
 8002d38:	eb01 0402 	add.w	r4, r1, r2
 8002d3c:	d902      	bls.n	8002d44 <memmove+0x10>
 8002d3e:	4284      	cmp	r4, r0
 8002d40:	4623      	mov	r3, r4
 8002d42:	d807      	bhi.n	8002d54 <memmove+0x20>
 8002d44:	1e43      	subs	r3, r0, #1
 8002d46:	42a1      	cmp	r1, r4
 8002d48:	d008      	beq.n	8002d5c <memmove+0x28>
 8002d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d52:	e7f8      	b.n	8002d46 <memmove+0x12>
 8002d54:	4402      	add	r2, r0
 8002d56:	4601      	mov	r1, r0
 8002d58:	428a      	cmp	r2, r1
 8002d5a:	d100      	bne.n	8002d5e <memmove+0x2a>
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d66:	e7f7      	b.n	8002d58 <memmove+0x24>

08002d68 <_sbrk_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4d06      	ldr	r5, [pc, #24]	@ (8002d84 <_sbrk_r+0x1c>)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4608      	mov	r0, r1
 8002d72:	602b      	str	r3, [r5, #0]
 8002d74:	f7fe fa22 	bl	80011bc <_sbrk>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d102      	bne.n	8002d82 <_sbrk_r+0x1a>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	b103      	cbz	r3, 8002d82 <_sbrk_r+0x1a>
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
 8002d84:	2000021c 	.word	0x2000021c

08002d88 <memcpy>:
 8002d88:	440a      	add	r2, r1
 8002d8a:	4291      	cmp	r1, r2
 8002d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d90:	d100      	bne.n	8002d94 <memcpy+0xc>
 8002d92:	4770      	bx	lr
 8002d94:	b510      	push	{r4, lr}
 8002d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d9e:	4291      	cmp	r1, r2
 8002da0:	d1f9      	bne.n	8002d96 <memcpy+0xe>
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <_realloc_r>:
 8002da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da8:	4680      	mov	r8, r0
 8002daa:	4615      	mov	r5, r2
 8002dac:	460c      	mov	r4, r1
 8002dae:	b921      	cbnz	r1, 8002dba <_realloc_r+0x16>
 8002db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	4611      	mov	r1, r2
 8002db6:	f7ff bc4b 	b.w	8002650 <_malloc_r>
 8002dba:	b92a      	cbnz	r2, 8002dc8 <_realloc_r+0x24>
 8002dbc:	f7ff fbdc 	bl	8002578 <_free_r>
 8002dc0:	2400      	movs	r4, #0
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dc8:	f000 f81a 	bl	8002e00 <_malloc_usable_size_r>
 8002dcc:	4285      	cmp	r5, r0
 8002dce:	4606      	mov	r6, r0
 8002dd0:	d802      	bhi.n	8002dd8 <_realloc_r+0x34>
 8002dd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002dd6:	d8f4      	bhi.n	8002dc2 <_realloc_r+0x1e>
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4640      	mov	r0, r8
 8002ddc:	f7ff fc38 	bl	8002650 <_malloc_r>
 8002de0:	4607      	mov	r7, r0
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d0ec      	beq.n	8002dc0 <_realloc_r+0x1c>
 8002de6:	42b5      	cmp	r5, r6
 8002de8:	462a      	mov	r2, r5
 8002dea:	4621      	mov	r1, r4
 8002dec:	bf28      	it	cs
 8002dee:	4632      	movcs	r2, r6
 8002df0:	f7ff ffca 	bl	8002d88 <memcpy>
 8002df4:	4621      	mov	r1, r4
 8002df6:	4640      	mov	r0, r8
 8002df8:	f7ff fbbe 	bl	8002578 <_free_r>
 8002dfc:	463c      	mov	r4, r7
 8002dfe:	e7e0      	b.n	8002dc2 <_realloc_r+0x1e>

08002e00 <_malloc_usable_size_r>:
 8002e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e04:	1f18      	subs	r0, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfbc      	itt	lt
 8002e0a:	580b      	ldrlt	r3, [r1, r0]
 8002e0c:	18c0      	addlt	r0, r0, r3
 8002e0e:	4770      	bx	lr

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
